package upgrade.ntv.bangsoccer.dao;

import upgrade.ntv.bangsoccer.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DBMATCH".
 */
public class DBMatch {

    private Long id;
    private String Date;
    private String Stadium;
    private String Time;
    private Integer Week;
    private long TourneyID;
    private long TeamID_A;
    private long TeamID_B;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBMatchDao myDao;

    private DBTourney tourney;
    private Long tourney__resolvedKey;

    private DBTeam teamA;
    private Long teamA__resolvedKey;

    private DBTeam teamB;
    private Long teamB__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DBMatch() {
    }

    public DBMatch(Long id) {
        this.id = id;
    }

    public DBMatch(Long id, String Date, String Stadium, String Time, Integer Week, long TourneyID, long TeamID_A, long TeamID_B) {
        this.id = id;
        this.Date = Date;
        this.Stadium = Stadium;
        this.Time = Time;
        this.Week = Week;
        this.TourneyID = TourneyID;
        this.TeamID_A = TeamID_A;
        this.TeamID_B = TeamID_B;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBMatchDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDate() {
        return Date;
    }

    public void setDate(String Date) {
        this.Date = Date;
    }

    public String getStadium() {
        return Stadium;
    }

    public void setStadium(String Stadium) {
        this.Stadium = Stadium;
    }

    public String getTime() {
        return Time;
    }

    public void setTime(String Time) {
        this.Time = Time;
    }

    public Integer getWeek() {
        return Week;
    }

    public void setWeek(Integer Week) {
        this.Week = Week;
    }

    public long getTourneyID() {
        return TourneyID;
    }

    public void setTourneyID(long TourneyID) {
        this.TourneyID = TourneyID;
    }

    public long getTeamID_A() {
        return TeamID_A;
    }

    public void setTeamID_A(long TeamID_A) {
        this.TeamID_A = TeamID_A;
    }

    public long getTeamID_B() {
        return TeamID_B;
    }

    public void setTeamID_B(long TeamID_B) {
        this.TeamID_B = TeamID_B;
    }

    /** To-one relationship, resolved on first access. */
    public DBTourney getTourney() {
        long __key = this.TourneyID;
        if (tourney__resolvedKey == null || !tourney__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBTourneyDao targetDao = daoSession.getDBTourneyDao();
            DBTourney tourneyNew = targetDao.load(__key);
            synchronized (this) {
                tourney = tourneyNew;
            	tourney__resolvedKey = __key;
            }
        }
        return tourney;
    }

    public void setTourney(DBTourney tourney) {
        if (tourney == null) {
            throw new DaoException("To-one property 'TourneyID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tourney = tourney;
            TourneyID = tourney.getId();
            tourney__resolvedKey = TourneyID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public DBTeam getTeamA() {
        long __key = this.TeamID_A;
        if (teamA__resolvedKey == null || !teamA__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBTeamDao targetDao = daoSession.getDBTeamDao();
            DBTeam teamANew = targetDao.load(__key);
            synchronized (this) {
                teamA = teamANew;
            	teamA__resolvedKey = __key;
            }
        }
        return teamA;
    }

    public void setTeamA(DBTeam teamA) {
        if (teamA == null) {
            throw new DaoException("To-one property 'TeamID_A' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teamA = teamA;
            TeamID_A = teamA.getId();
            teamA__resolvedKey = TeamID_A;
        }
    }

    /** To-one relationship, resolved on first access. */
    public DBTeam getTeamB() {
        long __key = this.TeamID_B;
        if (teamB__resolvedKey == null || !teamB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBTeamDao targetDao = daoSession.getDBTeamDao();
            DBTeam teamBNew = targetDao.load(__key);
            synchronized (this) {
                teamB = teamBNew;
            	teamB__resolvedKey = __key;
            }
        }
        return teamB;
    }

    public void setTeamB(DBTeam teamB) {
        if (teamB == null) {
            throw new DaoException("To-one property 'TeamID_B' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teamB = teamB;
            TeamID_B = teamB.getId();
            teamB__resolvedKey = TeamID_B;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
