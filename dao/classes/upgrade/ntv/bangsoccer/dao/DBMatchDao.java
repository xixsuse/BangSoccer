package upgrade.ntv.bangsoccer.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import upgrade.ntv.bangsoccer.dao.DBMatch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBMATCH".
*/
public class DBMatchDao extends AbstractDao<DBMatch, Long> {

    public static final String TABLENAME = "DBMATCH";

    /**
     * Properties of entity DBMatch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "Date", false, "DATE");
        public final static Property Stadium = new Property(2, String.class, "Stadium", false, "STADIUM");
        public final static Property Time = new Property(3, String.class, "Time", false, "TIME");
        public final static Property Week = new Property(4, Integer.class, "Week", false, "WEEK");
        public final static Property TourneyID = new Property(5, long.class, "TourneyID", false, "TOURNEY_ID");
        public final static Property TeamID_A = new Property(6, long.class, "TeamID_A", false, "TEAM_ID__A");
        public final static Property TeamID_B = new Property(7, long.class, "TeamID_B", false, "TEAM_ID__B");
    };

    private DaoSession daoSession;


    public DBMatchDao(DaoConfig config) {
        super(config);
    }
    
    public DBMatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBMATCH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: Date
                "\"STADIUM\" TEXT," + // 2: Stadium
                "\"TIME\" TEXT," + // 3: Time
                "\"WEEK\" INTEGER," + // 4: Week
                "\"TOURNEY_ID\" INTEGER NOT NULL ," + // 5: TourneyID
                "\"TEAM_ID__A\" INTEGER NOT NULL ," + // 6: TeamID_A
                "\"TEAM_ID__B\" INTEGER NOT NULL );"); // 7: TeamID_B
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBMATCH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBMatch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(2, Date);
        }
 
        String Stadium = entity.getStadium();
        if (Stadium != null) {
            stmt.bindString(3, Stadium);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(4, Time);
        }
 
        Integer Week = entity.getWeek();
        if (Week != null) {
            stmt.bindLong(5, Week);
        }
        stmt.bindLong(6, entity.getTourneyID());
        stmt.bindLong(7, entity.getTeamID_A());
        stmt.bindLong(8, entity.getTeamID_B());
    }

    @Override
    protected void attachEntity(DBMatch entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBMatch readEntity(Cursor cursor, int offset) {
        DBMatch entity = new DBMatch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Stadium
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Time
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Week
            cursor.getLong(offset + 5), // TourneyID
            cursor.getLong(offset + 6), // TeamID_A
            cursor.getLong(offset + 7) // TeamID_B
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBMatch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStadium(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeek(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTourneyID(cursor.getLong(offset + 5));
        entity.setTeamID_A(cursor.getLong(offset + 6));
        entity.setTeamID_B(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBMatch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBMatch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBTourneyDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDBTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getDBTeamDao().getAllColumns());
            builder.append(" FROM DBMATCH T");
            builder.append(" LEFT JOIN DBTOURNEY T0 ON T.\"TOURNEY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DBTEAM T1 ON T.\"TEAM_ID__A\"=T1.\"_id\"");
            builder.append(" LEFT JOIN DBTEAM T2 ON T.\"TEAM_ID__B\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBMatch loadCurrentDeep(Cursor cursor, boolean lock) {
        DBMatch entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBTourney tourney = loadCurrentOther(daoSession.getDBTourneyDao(), cursor, offset);
         if(tourney != null) {
            entity.setTourney(tourney);
        }
        offset += daoSession.getDBTourneyDao().getAllColumns().length;

        DBTeam teamA = loadCurrentOther(daoSession.getDBTeamDao(), cursor, offset);
         if(teamA != null) {
            entity.setTeamA(teamA);
        }
        offset += daoSession.getDBTeamDao().getAllColumns().length;

        DBTeam teamB = loadCurrentOther(daoSession.getDBTeamDao(), cursor, offset);
         if(teamB != null) {
            entity.setTeamB(teamB);
        }

        return entity;    
    }

    public DBMatch loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBMatch> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBMatch> list = new ArrayList<DBMatch>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBMatch> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBMatch> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
