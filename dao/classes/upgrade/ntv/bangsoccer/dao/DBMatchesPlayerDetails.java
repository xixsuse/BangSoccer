package upgrade.ntv.bangsoccer.dao;

import upgrade.ntv.bangsoccer.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DBMATCHES_PLAYER_DETAILS".
 */
public class DBMatchesPlayerDetails {

    private Long id;
    private Integer Goals;
    private Integer YellowCards;
    private Integer RedCards;
    private Integer Assist;
    private boolean Active;
    private long MatchID;
    private long PlayerID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBMatchesPlayerDetailsDao myDao;

    private DBMatch match;
    private Long match__resolvedKey;

    private DBPlayer player;
    private Long player__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DBMatchesPlayerDetails() {
    }

    public DBMatchesPlayerDetails(Long id) {
        this.id = id;
    }

    public DBMatchesPlayerDetails(Long id, Integer Goals, Integer YellowCards, Integer RedCards, Integer Assist, boolean Active, long MatchID, long PlayerID) {
        this.id = id;
        this.Goals = Goals;
        this.YellowCards = YellowCards;
        this.RedCards = RedCards;
        this.Assist = Assist;
        this.Active = Active;
        this.MatchID = MatchID;
        this.PlayerID = PlayerID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBMatchesPlayerDetailsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getGoals() {
        return Goals;
    }

    public void setGoals(Integer Goals) {
        this.Goals = Goals;
    }

    public Integer getYellowCards() {
        return YellowCards;
    }

    public void setYellowCards(Integer YellowCards) {
        this.YellowCards = YellowCards;
    }

    public Integer getRedCards() {
        return RedCards;
    }

    public void setRedCards(Integer RedCards) {
        this.RedCards = RedCards;
    }

    public Integer getAssist() {
        return Assist;
    }

    public void setAssist(Integer Assist) {
        this.Assist = Assist;
    }

    public boolean getActive() {
        return Active;
    }

    public void setActive(boolean Active) {
        this.Active = Active;
    }

    public long getMatchID() {
        return MatchID;
    }

    public void setMatchID(long MatchID) {
        this.MatchID = MatchID;
    }

    public long getPlayerID() {
        return PlayerID;
    }

    public void setPlayerID(long PlayerID) {
        this.PlayerID = PlayerID;
    }

    /** To-one relationship, resolved on first access. */
    public DBMatch getMatch() {
        long __key = this.MatchID;
        if (match__resolvedKey == null || !match__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBMatchDao targetDao = daoSession.getDBMatchDao();
            DBMatch matchNew = targetDao.load(__key);
            synchronized (this) {
                match = matchNew;
            	match__resolvedKey = __key;
            }
        }
        return match;
    }

    public void setMatch(DBMatch match) {
        if (match == null) {
            throw new DaoException("To-one property 'MatchID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.match = match;
            MatchID = match.getId();
            match__resolvedKey = MatchID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public DBPlayer getPlayer() {
        long __key = this.PlayerID;
        if (player__resolvedKey == null || !player__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBPlayerDao targetDao = daoSession.getDBPlayerDao();
            DBPlayer playerNew = targetDao.load(__key);
            synchronized (this) {
                player = playerNew;
            	player__resolvedKey = __key;
            }
        }
        return player;
    }

    public void setPlayer(DBPlayer player) {
        if (player == null) {
            throw new DaoException("To-one property 'PlayerID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.player = player;
            PlayerID = player.getId();
            player__resolvedKey = PlayerID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
