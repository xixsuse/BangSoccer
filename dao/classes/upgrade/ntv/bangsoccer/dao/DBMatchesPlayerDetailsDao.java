package upgrade.ntv.bangsoccer.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import upgrade.ntv.bangsoccer.dao.DBMatchesPlayerDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBMATCHES_PLAYER_DETAILS".
*/
public class DBMatchesPlayerDetailsDao extends AbstractDao<DBMatchesPlayerDetails, Long> {

    public static final String TABLENAME = "DBMATCHES_PLAYER_DETAILS";

    /**
     * Properties of entity DBMatchesPlayerDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goals = new Property(1, Integer.class, "Goals", false, "GOALS");
        public final static Property YellowCards = new Property(2, Integer.class, "YellowCards", false, "YELLOW_CARDS");
        public final static Property RedCards = new Property(3, Integer.class, "RedCards", false, "RED_CARDS");
        public final static Property Assist = new Property(4, Integer.class, "Assist", false, "ASSIST");
        public final static Property Active = new Property(5, boolean.class, "Active", false, "ACTIVE");
        public final static Property MatchID = new Property(6, long.class, "MatchID", false, "MATCH_ID");
        public final static Property PlayerID = new Property(7, long.class, "PlayerID", false, "PLAYER_ID");
    };

    private DaoSession daoSession;


    public DBMatchesPlayerDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public DBMatchesPlayerDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBMATCHES_PLAYER_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GOALS\" INTEGER," + // 1: Goals
                "\"YELLOW_CARDS\" INTEGER," + // 2: YellowCards
                "\"RED_CARDS\" INTEGER," + // 3: RedCards
                "\"ASSIST\" INTEGER," + // 4: Assist
                "\"ACTIVE\" INTEGER NOT NULL ," + // 5: Active
                "\"MATCH_ID\" INTEGER NOT NULL ," + // 6: MatchID
                "\"PLAYER_ID\" INTEGER NOT NULL );"); // 7: PlayerID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBMATCHES_PLAYER_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBMatchesPlayerDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Goals = entity.getGoals();
        if (Goals != null) {
            stmt.bindLong(2, Goals);
        }
 
        Integer YellowCards = entity.getYellowCards();
        if (YellowCards != null) {
            stmt.bindLong(3, YellowCards);
        }
 
        Integer RedCards = entity.getRedCards();
        if (RedCards != null) {
            stmt.bindLong(4, RedCards);
        }
 
        Integer Assist = entity.getAssist();
        if (Assist != null) {
            stmt.bindLong(5, Assist);
        }
        stmt.bindLong(6, entity.getActive() ? 1L: 0L);
        stmt.bindLong(7, entity.getMatchID());
        stmt.bindLong(8, entity.getPlayerID());
    }

    @Override
    protected void attachEntity(DBMatchesPlayerDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBMatchesPlayerDetails readEntity(Cursor cursor, int offset) {
        DBMatchesPlayerDetails entity = new DBMatchesPlayerDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Goals
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // YellowCards
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // RedCards
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Assist
            cursor.getShort(offset + 5) != 0, // Active
            cursor.getLong(offset + 6), // MatchID
            cursor.getLong(offset + 7) // PlayerID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBMatchesPlayerDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoals(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setYellowCards(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRedCards(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAssist(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setActive(cursor.getShort(offset + 5) != 0);
        entity.setMatchID(cursor.getLong(offset + 6));
        entity.setPlayerID(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBMatchesPlayerDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBMatchesPlayerDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBMatchDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDBPlayerDao().getAllColumns());
            builder.append(" FROM DBMATCHES_PLAYER_DETAILS T");
            builder.append(" LEFT JOIN DBMATCH T0 ON T.\"MATCH_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DBPLAYER T1 ON T.\"PLAYER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBMatchesPlayerDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        DBMatchesPlayerDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBMatch match = loadCurrentOther(daoSession.getDBMatchDao(), cursor, offset);
         if(match != null) {
            entity.setMatch(match);
        }
        offset += daoSession.getDBMatchDao().getAllColumns().length;

        DBPlayer player = loadCurrentOther(daoSession.getDBPlayerDao(), cursor, offset);
         if(player != null) {
            entity.setPlayer(player);
        }

        return entity;    
    }

    public DBMatchesPlayerDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBMatchesPlayerDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBMatchesPlayerDetails> list = new ArrayList<DBMatchesPlayerDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBMatchesPlayerDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBMatchesPlayerDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
