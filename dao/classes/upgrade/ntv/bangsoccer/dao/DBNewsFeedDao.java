package upgrade.ntv.bangsoccer.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import upgrade.ntv.bangsoccer.dao.DBNewsFeed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBNEWS_FEED".
*/
public class DBNewsFeedDao extends AbstractDao<DBNewsFeed, Long> {

    public static final String TABLENAME = "DBNEWS_FEED";

    /**
     * Properties of entity DBNewsFeed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
        public final static Property Message = new Property(2, String.class, "Message", false, "MESSAGE");
        public final static Property Story = new Property(3, String.class, "Story", false, "STORY");
        public final static Property Picture = new Property(4, byte[].class, "Picture", false, "PICTURE");
        public final static Property Date = new Property(5, String.class, "Date", false, "DATE");
    };


    public DBNewsFeedDao(DaoConfig config) {
        super(config);
    }
    
    public DBNewsFeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBNEWS_FEED\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: UserName
                "\"MESSAGE\" TEXT," + // 2: Message
                "\"STORY\" TEXT," + // 3: Story
                "\"PICTURE\" BLOB," + // 4: Picture
                "\"DATE\" TEXT);"); // 5: Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBNEWS_FEED\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBNewsFeed entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
 
        String Message = entity.getMessage();
        if (Message != null) {
            stmt.bindString(3, Message);
        }
 
        String Story = entity.getStory();
        if (Story != null) {
            stmt.bindString(4, Story);
        }
 
        byte[] Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindBlob(5, Picture);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(6, Date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBNewsFeed readEntity(Cursor cursor, int offset) {
        DBNewsFeed entity = new DBNewsFeed( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Story
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // Picture
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBNewsFeed entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicture(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBNewsFeed entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBNewsFeed entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
