package upgrade.ntv.bangsoccer.dao;

import upgrade.ntv.bangsoccer.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DBPLAYER".
 */
public class DBPlayer {

    private Long id;
    /** Not-null value. */
    private String FirstName;
    private String LastName;
    private String Alias;
    private String Gender;
    private String Nationality;
    private String Number;
    private String Position;
    private String Email;
    private java.util.Date BirthDate;
    private String Height;
    private String Weight;
    private String Feet;
    private boolean Active;
    private byte[] Avatar;
    private long TeamID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBPlayerDao myDao;

    private DBTeam team;
    private Long team__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DBPlayer() {
    }

    public DBPlayer(Long id) {
        this.id = id;
    }

    public DBPlayer(Long id, String FirstName, String LastName, String Alias, String Gender, String Nationality, String Number, String Position, String Email, java.util.Date BirthDate, String Height, String Weight, String Feet, boolean Active, byte[] Avatar, long TeamID) {
        this.id = id;
        this.FirstName = FirstName;
        this.LastName = LastName;
        this.Alias = Alias;
        this.Gender = Gender;
        this.Nationality = Nationality;
        this.Number = Number;
        this.Position = Position;
        this.Email = Email;
        this.BirthDate = BirthDate;
        this.Height = Height;
        this.Weight = Weight;
        this.Feet = Feet;
        this.Active = Active;
        this.Avatar = Avatar;
        this.TeamID = TeamID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBPlayerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getFirstName() {
        return FirstName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFirstName(String FirstName) {
        this.FirstName = FirstName;
    }

    public String getLastName() {
        return LastName;
    }

    public void setLastName(String LastName) {
        this.LastName = LastName;
    }

    public String getAlias() {
        return Alias;
    }

    public void setAlias(String Alias) {
        this.Alias = Alias;
    }

    public String getGender() {
        return Gender;
    }

    public void setGender(String Gender) {
        this.Gender = Gender;
    }

    public String getNationality() {
        return Nationality;
    }

    public void setNationality(String Nationality) {
        this.Nationality = Nationality;
    }

    public String getNumber() {
        return Number;
    }

    public void setNumber(String Number) {
        this.Number = Number;
    }

    public String getPosition() {
        return Position;
    }

    public void setPosition(String Position) {
        this.Position = Position;
    }

    public String getEmail() {
        return Email;
    }

    public void setEmail(String Email) {
        this.Email = Email;
    }

    public java.util.Date getBirthDate() {
        return BirthDate;
    }

    public void setBirthDate(java.util.Date BirthDate) {
        this.BirthDate = BirthDate;
    }

    public String getHeight() {
        return Height;
    }

    public void setHeight(String Height) {
        this.Height = Height;
    }

    public String getWeight() {
        return Weight;
    }

    public void setWeight(String Weight) {
        this.Weight = Weight;
    }

    public String getFeet() {
        return Feet;
    }

    public void setFeet(String Feet) {
        this.Feet = Feet;
    }

    public boolean getActive() {
        return Active;
    }

    public void setActive(boolean Active) {
        this.Active = Active;
    }

    public byte[] getAvatar() {
        return Avatar;
    }

    public void setAvatar(byte[] Avatar) {
        this.Avatar = Avatar;
    }

    public long getTeamID() {
        return TeamID;
    }

    public void setTeamID(long TeamID) {
        this.TeamID = TeamID;
    }

    /** To-one relationship, resolved on first access. */
    public DBTeam getTeam() {
        long __key = this.TeamID;
        if (team__resolvedKey == null || !team__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBTeamDao targetDao = daoSession.getDBTeamDao();
            DBTeam teamNew = targetDao.load(__key);
            synchronized (this) {
                team = teamNew;
            	team__resolvedKey = __key;
            }
        }
        return team;
    }

    public void setTeam(DBTeam team) {
        if (team == null) {
            throw new DaoException("To-one property 'TeamID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.team = team;
            TeamID = team.getId();
            team__resolvedKey = TeamID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
