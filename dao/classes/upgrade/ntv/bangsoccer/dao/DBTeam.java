package upgrade.ntv.bangsoccer.dao;

import upgrade.ntv.bangsoccer.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DBTEAM".
 */
public class DBTeam {

    private Long id;
    /** Not-null value. */
    private String Name;
    private boolean Active;
    private long ClubID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBTeamDao myDao;

    private DBClub club;
    private Long club__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DBTeam() {
    }

    public DBTeam(Long id) {
        this.id = id;
    }

    public DBTeam(Long id, String Name, boolean Active, long ClubID) {
        this.id = id;
        this.Name = Name;
        this.Active = Active;
        this.ClubID = ClubID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBTeamDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    public boolean getActive() {
        return Active;
    }

    public void setActive(boolean Active) {
        this.Active = Active;
    }

    public long getClubID() {
        return ClubID;
    }

    public void setClubID(long ClubID) {
        this.ClubID = ClubID;
    }

    /** To-one relationship, resolved on first access. */
    public DBClub getClub() {
        long __key = this.ClubID;
        if (club__resolvedKey == null || !club__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBClubDao targetDao = daoSession.getDBClubDao();
            DBClub clubNew = targetDao.load(__key);
            synchronized (this) {
                club = clubNew;
            	club__resolvedKey = __key;
            }
        }
        return club;
    }

    public void setClub(DBClub club) {
        if (club == null) {
            throw new DaoException("To-one property 'ClubID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.club = club;
            ClubID = club.getId();
            club__resolvedKey = ClubID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
