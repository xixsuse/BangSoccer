package upgrade.ntv.bangsoccer.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import upgrade.ntv.bangsoccer.dao.DBTourney;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTOURNEY".
*/
public class DBTourneyDao extends AbstractDao<DBTourney, Long> {

    public static final String TABLENAME = "DBTOURNEY";

    /**
     * Properties of entity DBTourney.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Active = new Property(2, boolean.class, "Active", false, "ACTIVE");
        public final static Property Location = new Property(3, String.class, "Location", false, "LOCATION");
        public final static Property StartDate = new Property(4, String.class, "StartDate", false, "START_DATE");
    };


    public DBTourneyDao(DaoConfig config) {
        super(config);
    }
    
    public DBTourneyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTOURNEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: Name
                "\"ACTIVE\" INTEGER NOT NULL ," + // 2: Active
                "\"LOCATION\" TEXT," + // 3: Location
                "\"START_DATE\" TEXT);"); // 4: StartDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTOURNEY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBTourney entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getActive() ? 1L: 0L);
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(4, Location);
        }
 
        String StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindString(5, StartDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBTourney readEntity(Cursor cursor, int offset) {
        DBTourney entity = new DBTourney( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Name
            cursor.getShort(offset + 2) != 0, // Active
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // StartDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBTourney entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setActive(cursor.getShort(offset + 2) != 0);
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBTourney entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBTourney entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
