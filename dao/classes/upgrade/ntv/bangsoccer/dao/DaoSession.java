package upgrade.ntv.bangsoccer.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import upgrade.ntv.bangsoccer.dao.DBClub;
import upgrade.ntv.bangsoccer.dao.DBTourney;
import upgrade.ntv.bangsoccer.dao.DBTeam;
import upgrade.ntv.bangsoccer.dao.DBMatch;
import upgrade.ntv.bangsoccer.dao.DBPlayer;
import upgrade.ntv.bangsoccer.dao.DBMatchesPlayerDetails;
import upgrade.ntv.bangsoccer.dao.DBNewsFeed;

import upgrade.ntv.bangsoccer.dao.DBClubDao;
import upgrade.ntv.bangsoccer.dao.DBTourneyDao;
import upgrade.ntv.bangsoccer.dao.DBTeamDao;
import upgrade.ntv.bangsoccer.dao.DBMatchDao;
import upgrade.ntv.bangsoccer.dao.DBPlayerDao;
import upgrade.ntv.bangsoccer.dao.DBMatchesPlayerDetailsDao;
import upgrade.ntv.bangsoccer.dao.DBNewsFeedDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig dBClubDaoConfig;
    private final DaoConfig dBTourneyDaoConfig;
    private final DaoConfig dBTeamDaoConfig;
    private final DaoConfig dBMatchDaoConfig;
    private final DaoConfig dBPlayerDaoConfig;
    private final DaoConfig dBMatchesPlayerDetailsDaoConfig;
    private final DaoConfig dBNewsFeedDaoConfig;

    private final DBClubDao dBClubDao;
    private final DBTourneyDao dBTourneyDao;
    private final DBTeamDao dBTeamDao;
    private final DBMatchDao dBMatchDao;
    private final DBPlayerDao dBPlayerDao;
    private final DBMatchesPlayerDetailsDao dBMatchesPlayerDetailsDao;
    private final DBNewsFeedDao dBNewsFeedDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        dBClubDaoConfig = daoConfigMap.get(DBClubDao.class).clone();
        dBClubDaoConfig.initIdentityScope(type);

        dBTourneyDaoConfig = daoConfigMap.get(DBTourneyDao.class).clone();
        dBTourneyDaoConfig.initIdentityScope(type);

        dBTeamDaoConfig = daoConfigMap.get(DBTeamDao.class).clone();
        dBTeamDaoConfig.initIdentityScope(type);

        dBMatchDaoConfig = daoConfigMap.get(DBMatchDao.class).clone();
        dBMatchDaoConfig.initIdentityScope(type);

        dBPlayerDaoConfig = daoConfigMap.get(DBPlayerDao.class).clone();
        dBPlayerDaoConfig.initIdentityScope(type);

        dBMatchesPlayerDetailsDaoConfig = daoConfigMap.get(DBMatchesPlayerDetailsDao.class).clone();
        dBMatchesPlayerDetailsDaoConfig.initIdentityScope(type);

        dBNewsFeedDaoConfig = daoConfigMap.get(DBNewsFeedDao.class).clone();
        dBNewsFeedDaoConfig.initIdentityScope(type);

        dBClubDao = new DBClubDao(dBClubDaoConfig, this);
        dBTourneyDao = new DBTourneyDao(dBTourneyDaoConfig, this);
        dBTeamDao = new DBTeamDao(dBTeamDaoConfig, this);
        dBMatchDao = new DBMatchDao(dBMatchDaoConfig, this);
        dBPlayerDao = new DBPlayerDao(dBPlayerDaoConfig, this);
        dBMatchesPlayerDetailsDao = new DBMatchesPlayerDetailsDao(dBMatchesPlayerDetailsDaoConfig, this);
        dBNewsFeedDao = new DBNewsFeedDao(dBNewsFeedDaoConfig, this);

        registerDao(DBClub.class, dBClubDao);
        registerDao(DBTourney.class, dBTourneyDao);
        registerDao(DBTeam.class, dBTeamDao);
        registerDao(DBMatch.class, dBMatchDao);
        registerDao(DBPlayer.class, dBPlayerDao);
        registerDao(DBMatchesPlayerDetails.class, dBMatchesPlayerDetailsDao);
        registerDao(DBNewsFeed.class, dBNewsFeedDao);
    }
    
    public void clear() {
        dBClubDaoConfig.getIdentityScope().clear();
        dBTourneyDaoConfig.getIdentityScope().clear();
        dBTeamDaoConfig.getIdentityScope().clear();
        dBMatchDaoConfig.getIdentityScope().clear();
        dBPlayerDaoConfig.getIdentityScope().clear();
        dBMatchesPlayerDetailsDaoConfig.getIdentityScope().clear();
        dBNewsFeedDaoConfig.getIdentityScope().clear();
    }

    public DBClubDao getDBClubDao() {
        return dBClubDao;
    }

    public DBTourneyDao getDBTourneyDao() {
        return dBTourneyDao;
    }

    public DBTeamDao getDBTeamDao() {
        return dBTeamDao;
    }

    public DBMatchDao getDBMatchDao() {
        return dBMatchDao;
    }

    public DBPlayerDao getDBPlayerDao() {
        return dBPlayerDao;
    }

    public DBMatchesPlayerDetailsDao getDBMatchesPlayerDetailsDao() {
        return dBMatchesPlayerDetailsDao;
    }

    public DBNewsFeedDao getDBNewsFeedDao() {
        return dBNewsFeedDao;
    }

}
